/*
 * Copyright (c) 2015 Project contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.mobilize.uninstaller"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            if (rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file('private.properties')))

                storeFile = file(props['KEYSTORE_FILE'])
                storePassword = props['KEYSTORE_PASSWORD']
                keyAlias = props['KEYSTORE_KEY_ALIAS']
                keyPassword = props['KEYSTORE_KEY_PASSWORD']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (rootProject.file('private.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
}

task checkAuthors {
    def gitEmailsText = "git log --format=%ae".execute().text
    def authorsEmailsText = new File("AUTHORS").text

    def actualAuthorEmails = new HashSet()
    def listedAuthorEmails = new HashSet()

    gitEmailsText.eachLine { line -> actualAuthorEmails.add(line.toLowerCase()) }
    authorsEmailsText.eachLine { entry ->
        try {
            def email = (entry =~ /<([^>]+)>/)[0][1]
            listedAuthorEmails.add(email.toLowerCase())
        } catch (Exception e) {
            throw new GradleException("AUTHORS entry '$entry' is not formatted correctly. Must be 'Author Name <email@domain.tld>'")
        }
    }

    // Match sets
    if (!actualAuthorEmails.equals(listedAuthorEmails)) {
        def diff = (actualAuthorEmails - listedAuthorEmails);
        if (!diff.empty) {
            throw new GradleException("The following author(s): $diff are not listed on AUTHORS file")
        } else {
            diff = listedAuthorEmails - actualAuthorEmails;
            throw new GradleException("The following author(s): $diff are listed on AUTHORS file without commits to the project")
        }
    }
}

afterEvaluate {
    // Check authors list before building release builds
    preReleaseBuild.dependsOn(checkAuthors)
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Support libs
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    // Activity leak tracking
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"

    compile("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsVersion") {
        transitive = true;
    }

    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    compile "com.jakewharton.timber:timber:$rootProject.timberVersion"

    testCompile "junit:junit:$rootProject.junitVersion"
}
